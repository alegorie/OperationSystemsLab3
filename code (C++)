#include <windows.h>													
#include <tchar.h>


LRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam);
HINSTANCE g_hInst;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)														//Markov KM-42
{
	HWND    hwnd;
	MSG     Msg;
	HICON   hIcon;
	HCURSOR hCursor;

	TCHAR chClassName[] = TEXT("SIMPLEWND");
	WNDCLASSEX wcx;
	g_hInst = hInstance;

	

	/*Ex4_Menu MENU
	{
		POPUP "&File"
	{
		MENUITEM "&Open...\tCtrl-O", 2
		MENUITEM "&Save", 3
		MENUITEM "Save &As...", 4
		MENUITEM SEPARATOR
		MENUITEM "&Hex view", 5, CHECKED GRAYED
		MENUITEM "&Exit\tAlt-F4", 6
	}
	POPUP "&Edit"
	{
		MENUITEM "&Copy", 7
			MENUITEM "&Paste", 8
			POPUP "Popup"
		{
			MENUITEM "1", 9
				MENUITEM "2", 10
				MENUITEM "3", 11
		}
		MENUITEM SEPARATOR
			MENUITEM "Search", 12
	}
	POPUP "&Help"
	{
		MENUITEM "&About...\tF1", 13
	}
	*/

	hIcon = (HICON)LoadImage(0, IDI_APPLICATION, IMAGE_ICON, 0, 0, LR_SHARED);
	hCursor = (HCURSOR)LoadImage(0, IDC_ARROW, IMAGE_CURSOR, 0, 0, LR_SHARED);
	wcx.cbSize = sizeof(WNDCLASSEX);
	wcx.style = CS_HREDRAW | CS_VREDRAW;
	wcx.lpfnWndProc = (WNDPROC)WndProc;
	wcx.cbClsExtra = 0;
	wcx.cbWndExtra = 0;
	wcx.hInstance = hInstance;
	wcx.hIcon = hIcon;
	wcx.hCursor = hCursor;
	wcx.hbrBackground = (HBRUSH)(COLOR_BTNFACE + 1);
	wcx.lpszMenuName = NULL;
	wcx.lpszClassName = chClassName;
	wcx.hIconSm = NULL;

	RegisterClassEx(&wcx);

	hwnd = CreateWindowEx(0,
		chClassName,
		TEXT("TextEditor"),
		WS_OVERLAPPEDWINDOW,
		GetSystemMetrics(SM_CXSCREEN) / 4,
		GetSystemMetrics(SM_CYSCREEN) / 4,
		GetSystemMetrics(SM_CXSCREEN) / 2,
		GetSystemMetrics(SM_CYSCREEN) / 2,
		NULL,
		NULL,
		hInstance,
		NULL);

	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);

	while (GetMessage(&Msg, NULL, 0, 0) > 0)
	{
		TranslateMessage(&Msg);
		DispatchMessage(&Msg);
	}
	return Msg.wParam;
}
//-----------------------------------------------------------------------------
LRESULT CALLBACK WndProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
{
	RECT rct;
	switch (Message)
	{
	case WM_CREATE:
		GetClientRect(hwnd, &rct);
		CreateWindowEx(WS_EX_CLIENTEDGE,
			TEXT("EDIT"),
			TEXT(""),
			WS_CHILD | WS_VISIBLE | WS_BORDER |
			ES_MULTILINE,
			10,
			10,
			rct.right - 20,
			rct.bottom - 20,
			hwnd,
			NULL,
			g_hInst,
			NULL);
		return 0;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	default:
		return DefWindowProc(hwnd, Message, wParam, lParam);
	}
}
